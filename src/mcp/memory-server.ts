/**
 * Memory MCP Server - Server chuy√™n v·ªÅ l∆∞u tr·ªØ v√† truy xu·∫•t th√¥ng tin cho AI
 */
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { handleUniversalMemory } from "../memory/universal-tool.js";
import { UniversalRequest } from "../types/index.js";

/**
 * ƒêƒÉng k√Ω Universal Memory Tool
 */
export function registerMemoryServer(server: McpServer) {
  // üöÄ UNIVERSAL MEMORY TOOL - Tool duy nh·∫•t ƒë·ªÉ rule them all!
  server.tool(
    "universalMemory",
    "Universal tool ƒë·ªÉ l∆∞u tr·ªØ, truy xu·∫•t v√† qu·∫£n l√Ω t·∫•t c·∫£ th√¥ng tin cho AI",
    {
      action: z
        .enum([
          "store", // L∆∞u tr·ªØ th√¥ng tin
          "retrieve", // Truy xu·∫•t th√¥ng tin
          "search", // T√¨m ki·∫øm th√¥ng tin
          "list", // Li·ªát k√™ t·∫•t c·∫£
          "delete", // X√≥a th√¥ng tin
          "update", // C·∫≠p nh·∫≠t th√¥ng tin
          "create_tool", // T·∫°o tool m·ªõi
          "create_api_tool", // T·∫°o API tool v·ªõi template
          "execute_tool", // Th·ª±c thi tool
          "list_tools", // Li·ªát k√™ tools
          "delete_tool", // X√≥a tool
          "analyze", // Ph√¢n t√≠ch d·ªØ li·ªáu
          "export", // Xu·∫•t d·ªØ li·ªáu
          "import", // Nh·∫≠p d·ªØ li·ªáu
          "clear_all", // X√≥a s·∫°ch t·∫•t c·∫£ entries
          "clear_tools", // X√≥a s·∫°ch t·∫•t c·∫£ tools
          "reset", // Reset to√†n b·ªô h·ªá th·ªëng
        ])
        .describe("H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán"),

      // For memory operations
      key: z.string().optional().describe("Key ƒë·ªÉ l∆∞u tr·ªØ/truy xu·∫•t th√¥ng tin"),
      value: z
        .any()
        .optional()
        .describe(
          "Gi√° tr·ªã c·∫ßn l∆∞u tr·ªØ (c√≥ th·ªÉ l√† text, object, array, number...)"
        ),
      type: z
        .enum(["text", "json", "list", "counter", "custom"])
        .optional()
        .describe("Lo·∫°i d·ªØ li·ªáu"),
      description: z.string().optional().describe("M√¥ t·∫£ v·ªÅ th√¥ng tin n√†y"),
      tags: z.array(z.string()).optional().describe("Tags ƒë·ªÉ ph√¢n lo·∫°i"),

      // For search
      query: z.string().optional().describe("T·ª´ kh√≥a t√¨m ki·∫øm"),
      limit: z.number().optional().describe("S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa"),

      // For tools
      toolName: z.string().optional().describe("T√™n tool"),
      toolId: z.string().optional().describe("ID c·ªßa tool"),
      toolDescription: z.string().optional().describe("M√¥ t·∫£ tool"),
      toolType: z
        .enum(["storage", "retrieval", "processor", "analyzer"])
        .optional()
        .describe("Lo·∫°i tool"),
      parameters: z.record(z.any()).optional().describe("Parameters c·ªßa tool"),
      handlerCode: z
        .string()
        .optional()
        .describe("JavaScript code ƒë·ªÉ x·ª≠ l√Ω tool"),
      args: z.record(z.any()).optional().describe("Arguments ƒë·ªÉ th·ª±c thi tool"),

      // For analysis
      analysisType: z
        .enum(["summary", "count", "trends", "relationships"])
        .optional()
        .describe("Lo·∫°i ph√¢n t√≠ch"),

      // For export/import
      format: z
        .enum(["json", "csv", "txt"])
        .optional()
        .describe("Format d·ªØ li·ªáu"),
      data: z.any().optional().describe("D·ªØ li·ªáu ƒë·ªÉ import"),

      // For API tool creation
      apiUrl: z.string().optional().describe("URL c·ªßa API endpoint"),
      apiMethod: z
        .enum(["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"])
        .optional()
        .describe("HTTP method"),
      apiHeaders: z
        .record(z.string())
        .optional()
        .describe("Default headers cho API"),
      apiAuth: z
        .object({
          type: z.enum(["bearer", "basic", "api-key"]),
          token: z.string().optional(),
          username: z.string().optional(),
          password: z.string().optional(),
          apiKey: z.string().optional(),
          apiKeyHeader: z.string().optional(),
        })
        .optional()
        .describe("Authentication config"),
      apiTimeout: z
        .number()
        .optional()
        .describe("Timeout cho API request (ms)"),
    },
    async (params) => {
      try {
        // T·∫°o request cho universal tool
        const request: UniversalRequest = {
          action: params.action,
          key: params.key,
          value: params.value,
          type: params.type,
          description: params.description,
          tags: params.tags,
          query: params.query,
          limit: params.limit,
          toolName: params.toolName,
          toolId: params.toolId,
          toolDescription: params.toolDescription,
          toolType: params.toolType,
          parameters: params.parameters,
          handlerCode: params.handlerCode,
          args: params.args,
          analysisType: params.analysisType,
          format: params.format,
          data: params.data,
          apiUrl: params.apiUrl,
          apiMethod: params.apiMethod,
          apiHeaders: params.apiHeaders,
          apiAuth: params.apiAuth,
          apiTimeout: params.apiTimeout,
        };

        // Th·ª±c thi universal tool
        const result = await handleUniversalMemory(request);

        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho execute_tool - tr·∫£ v·ªÅ k·∫øt qu·∫£ tr·ª±c ti·∫øp
        if (params.action === "execute_tool" && result.success) {
          // N·∫øu tool tr·∫£ v·ªÅ MCP format, s·ª≠ d·ª•ng tr·ª±c ti·∫øp
          if (
            result.data &&
            typeof result.data === "object" &&
            result.data.content
          ) {
            return result.data;
          }

          // N·∫øu kh√¥ng, wrap trong MCP format
          return {
            content: [
              {
                type: "text",
                text: JSON.stringify(result.data, null, 2),
              },
            ],
          };
        }

        // Cho c√°c actions kh√°c, tr·∫£ v·ªÅ format Universal Tool
        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(result, null, 2),
            },
          ],
        };
      } catch (error: unknown) {
        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(
                {
                  success: false,
                  error: `L·ªói trong universalMemory: ${
                    (error as Error).message
                  }`,
                  timestamp: new Date().toISOString(),
                },
                null,
                2
              ),
            },
          ],
        };
      }
    }
  );

  // Tool gi·ªõi thi·ªáu v·ªÅ Memory MCP
  server.tool(
    "introduction",
    "Gi·ªõi thi·ªáu v·ªÅ Memory MCP Server",
    {},
    async () => {
      return {
        content: [
          {
            type: "text",
            text: `# üß† Memory MCP Server

## Gi·ªõi thi·ªáu

Memory MCP Server l√† m·ªôt h·ªá th·ªëng l∆∞u tr·ªØ v√† truy xu·∫•t th√¥ng tin chuy√™n d·ª•ng cho AI.

## üöÄ Universal Memory Tool

Ch·ªâ c·∫ßn s·ª≠ d·ª•ng **1 tool duy nh·∫•t**: \`universalMemory\`

### üìù C√°c Actions c√≥ s·∫µn:

#### Memory Operations:
- **store**: L∆∞u tr·ªØ th√¥ng tin
- **retrieve**: Truy xu·∫•t th√¥ng tin
- **search**: T√¨m ki·∫øm th√¥ng tin
- **list**: Li·ªát k√™ t·∫•t c·∫£
- **delete**: X√≥a th√¥ng tin
- **update**: C·∫≠p nh·∫≠t th√¥ng tin
- **clear_all**: X√≥a s·∫°ch t·∫•t c·∫£ entries
- **reset**: Reset to√†n b·ªô h·ªá th·ªëng

#### Tool Operations:
- **create_tool**: T·∫°o tool t√πy ch·ªânh
- **create_api_tool**: T·∫°o API tool v·ªõi template
- **execute_tool**: Th·ª±c thi tool b·∫±ng ID/name
- **list_tools**: Li·ªát k√™ t·∫•t c·∫£ tools
- **delete_tool**: X√≥a tool
- **clear_tools**: X√≥a s·∫°ch t·∫•t c·∫£ tools

#### Analysis & Data:
- **analyze**: Ph√¢n t√≠ch d·ªØ li·ªáu
- **export**: Xu·∫•t d·ªØ li·ªáu
- **import**: Nh·∫≠p d·ªØ li·ªáu

## üí° V√≠ d·ª• s·ª≠ d·ª•ng:

### L∆∞u tr·ªØ th√¥ng tin:
\`\`\`
universalMemory(action: "store", key: "user_preferences", value: {...}, type: "json")
\`\`\`

### Truy xu·∫•t th√¥ng tin:
\`\`\`
universalMemory(action: "retrieve", key: "user_preferences")
\`\`\`

### T·∫°o tool t√πy ch·ªânh:
\`\`\`
universalMemory(action: "create_tool", toolName: "notekeeper", ...)
\`\`\`

### T·∫°o API tool:
\`\`\`
universalMemory(action: "create_api_tool", toolName: "weatherAPI", apiUrl: "https://api.weather.com/v1/current", apiMethod: "GET", apiHeaders: {"X-API-Key": "your-key"})
\`\`\`

### Th·ª±c thi tool:
\`\`\`
universalMemory(action: "execute_tool", toolName: "notekeeper", args: {...})
\`\`\`

## ‚ú® T√≠nh nƒÉng:

- üíæ **Persistent Storage**: D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr√™n disk
- üîç **Full-text Search**: T√¨m ki·∫øm trong t·∫•t c·∫£ d·ªØ li·ªáu
- üè∑Ô∏è **Tags & Metadata**: Ph√¢n lo·∫°i v√† qu·∫£n l√Ω
- üìä **Analytics**: Ph√¢n t√≠ch usage v√† trends
- üõ†Ô∏è **Custom Tools**: T·∫°o tools ri√™ng cho workflow
- üì§ **Export/Import**: Backup v√† restore d·ªØ li·ªáu

H√£y b·∫Øt ƒë·∫ßu v·ªõi \`universalMemory\` ƒë·ªÉ kh√°m ph√° t·∫•t c·∫£ t√≠nh nƒÉng! üöÄ`,
          },
        ],
      };
    }
  );

  // Tool ƒë·ªÉ l·∫•y examples v·ªÅ c√°ch t·∫°o memory tools
  server.tool(
    "getMemoryToolExamples",
    "L·∫•y examples v·ªÅ c√°ch t·∫°o memory tools ƒë√∫ng c√°ch",
    {},
    async () => {
      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(
              {
                examples: {
                  notekeeper: {
                    name: "notekeeper",
                    description: "Tool ƒë·ªÉ l∆∞u v√† qu·∫£n l√Ω ghi ch√∫",
                    type: "storage",
                    parameters: {
                      action: {
                        type: "string",
                        description: "add, get, list, delete",
                      },
                      title: { type: "string", description: "Ti√™u ƒë·ªÅ ghi ch√∫" },
                      content: {
                        type: "string",
                        description: "N·ªôi dung ghi ch√∫",
                      },
                      id: { type: "string", description: "ID ghi ch√∫" },
                    },
                    handlerCode: `
const { action, title, content, id } = args;

switch (action) {
  case 'add':
    const noteId = generateId();
    const note = { id: noteId, title, content, createdAt: new Date().toISOString() };
    storage.store(\`note_\${noteId}\`, note, 'json', \`Note: \${title}\`, ['note']);
    return { content: [{ type: "text", text: JSON.stringify({ success: true, noteId, message: "Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c l∆∞u" }, null, 2) }] };
    
  case 'get':
    const retrieved = storage.retrieve(\`note_\${id}\`);
    return { content: [{ type: "text", text: JSON.stringify(retrieved ? retrieved.value : { error: "Kh√¥ng t√¨m th·∫•y ghi ch√∫" }, null, 2) }] };
    
  case 'list':
    const notes = storage.search('note').map(e => e.value);
    return { content: [{ type: "text", text: JSON.stringify({ notes, count: notes.length }, null, 2) }] };
    
  case 'delete':
    const deleted = storage.delete(\`note_\${id}\`);
    return { content: [{ type: "text", text: JSON.stringify({ success: deleted, message: deleted ? "ƒê√£ x√≥a" : "Kh√¥ng t√¨m th·∫•y" }, null, 2) }] };
    
  default:
    return { content: [{ type: "text", text: JSON.stringify({ error: "Action kh√¥ng h·ª£p l·ªá" }, null, 2) }] };
}
`,
                  },

                  taskTracker: {
                    name: "taskTracker",
                    description: "Tool theo d√µi c√¥ng vi·ªác",
                    type: "processor",
                    parameters: {
                      action: {
                        type: "string",
                        description: "add, complete, list, stats",
                      },
                      task: { type: "string", description: "M√¥ t·∫£ c√¥ng vi·ªác" },
                      priority: {
                        type: "string",
                        description: "high, medium, low",
                      },
                      id: { type: "string", description: "ID c√¥ng vi·ªác" },
                    },
                    handlerCode: `
const { action, task, priority, id } = args;

switch (action) {
  case 'add':
    const taskId = generateId();
    const newTask = { 
      id: taskId, 
      task, 
      priority: priority || 'medium', 
      status: 'pending',
      createdAt: new Date().toISOString() 
    };
    storage.store(\`task_\${taskId}\`, newTask, 'json', \`Task: \${task}\`, ['task', priority]);
    return { content: [{ type: "text", text: JSON.stringify({ success: true, taskId, task: newTask }, null, 2) }] };
    
  case 'complete':
    const taskEntry = storage.retrieve(\`task_\${id}\`);
    if (taskEntry) {
      taskEntry.value.status = 'completed';
      taskEntry.value.completedAt = new Date().toISOString();
      storage.update(\`task_\${id}\`, taskEntry.value);
      return { content: [{ type: "text", text: JSON.stringify({ success: true, message: "Task ƒë√£ ho√†n th√†nh" }, null, 2) }] };
    }
    return { content: [{ type: "text", text: JSON.stringify({ error: "Kh√¥ng t√¨m th·∫•y task" }, null, 2) }] };
    
  case 'list':
    const tasks = storage.search('task').map(e => e.value);
    return { content: [{ type: "text", text: JSON.stringify({ tasks, count: tasks.length }, null, 2) }] };
    
  case 'stats':
    const allTasks = storage.search('task').map(e => e.value);
    const stats = {
      total: allTasks.length,
      pending: allTasks.filter(t => t.status === 'pending').length,
      completed: allTasks.filter(t => t.status === 'completed').length,
      byPriority: {
        high: allTasks.filter(t => t.priority === 'high').length,
        medium: allTasks.filter(t => t.priority === 'medium').length,
        low: allTasks.filter(t => t.priority === 'low').length
      }
    };
    return { content: [{ type: "text", text: JSON.stringify(stats, null, 2) }] };
    
  default:
    return { content: [{ type: "text", text: JSON.stringify({ error: "Action kh√¥ng h·ª£p l·ªá" }, null, 2) }] };
}
`,
                  },
                },

                apiTool: {
                  name: "weatherAPI",
                  description: "Tool ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt",
                  type: "processor",
                  createdWith: "create_api_tool",
                  example: {
                    action: "create_api_tool",
                    toolName: "weatherAPI",
                    toolDescription:
                      "Tool ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt t·ª´ OpenWeatherMap",
                    apiUrl: "https://api.openweathermap.org/data/2.5/weather",
                    apiMethod: "GET",
                    apiHeaders: {
                      "Content-Type": "application/json",
                    },
                    apiAuth: {
                      type: "api-key",
                      apiKey: "your-api-key",
                      apiKeyHeader: "appid",
                    },
                    apiTimeout: 10000,
                  },
                  usage: {
                    action: "execute_tool",
                    toolName: "weatherAPI",
                    args: {
                      params: {
                        q: "Hanoi,VN",
                        units: "metric",
                      },
                    },
                  },
                },

                guidelines: `
‚ö†Ô∏è QUAN TR·ªåNG: Handler code c·ªßa memory tools PH·∫¢I:

1. Tr·∫£ v·ªÅ MCP format:
   return { content: [{ type: "text", text: JSON.stringify(result, null, 2) }] };

2. S·ª≠ d·ª•ng storage context:
   - storage.store(key, value, type, description, tags)
   - storage.retrieve(key)
   - storage.search(query)
   - storage.delete(key)
   - storage.update(key, value)

3. S·ª≠ d·ª•ng generateId() ƒë·ªÉ t·∫°o ID unique

4. X·ª≠ l√Ω errors properly v·ªõi try-catch
              `,
              },
              null,
              2
            ),
          },
        ],
      };
    }
  );
}
